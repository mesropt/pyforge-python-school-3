services:
  postgres:
    image: postgres:13
    env_file: ".env"
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data

  web1:
    build: . # based on Dockerfile from current directory (.)
    volumes:
      - .:/fastapi_app  # Mount the entire project directory to /fastapi_app
    environment:
      SERVER_ID: "SERVER-1"
    env_file: ".env"
    ports:
      - "8020:8010" # host machine port:container port
    depends_on:
      - postgres
      - redis
      - celery_worker

  web2:
    build: .
    volumes:
      - .:/fastapi_app
    environment:
      SERVER_ID: "SERVER-2"
    env_file: ".env"
    ports:
      - "8021:8010"
    depends_on:
      - postgres
      - redis
      - celery_worker

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"

  # redis-cli -h localhost -p 6379
# KEYS *

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - web1
      - web2

  tests:
    build: .
    command: pytest -v -s
    volumes:
      - .:/fastapi_app  # Mount the entire project directory to see all project files and use them
    env_file: ".env"
    depends_on:
      - postgres
      - redis

staging:
  build: .  # Используем тот же Dockerfile
  volumes:
    - .:/fastapi_app
  environment:
    ENV: "staging"  # Переменная окружения
    SERVER_ID: "STAGING_SERVER"
  env_file: ".env.staging"  # Отдельный файл для staging
  ports:
    - "8030:8010"  # Отдельный порт для staging
  depends_on:
    - postgres
    - redis


  celery_worker:
    build: .
    command: celery -A src.celery_worker worker --loglevel=info
    depends_on:
      - redis
    volumes:
      - .:/fastapi_app
    env_file: ".env"

  ruff:
    build: .
    command: ruff check --no-cache /fastapi_app/src /fastapi_app/tests
    working_dir: /fastapi_app
    volumes:
      - .:/fastapi_app
    stdin_open: true
    tty: true

volumes:
  pg-data:
  redis-data: